One of the most important part of CSS is positioning. Positioning allows us to create a layout for our page, and make it look appealing. As of right now our site is just one giant 'list' of elements. What I mean by list is that all the elements we have - from h1 to ul - are just one after another vertically, with no thought on how things are layed out.

<br>
<br>

The methods we will be learning today aren't all the methods that we will be using in the future, but are simple enough for this basic introduction course. If you are wanting to look at something a bit more advanced I would recommend

 <a href="/course/css-layout-with-flexbox">CSS: Layout with Flexbox</a>.

<br>
<br>

We have a way of defining our elements position using a 'position' property. This property can be given a value of static (which is the default value of all html elements), relative, absolute and fixed. We will start with relative.


<br>
<br>

A position of relative is very similar to the default static position but we can use properties left, right, bottom and top to offset the element. We will go to our css file and add a position of relative to our li's

<code><css>
li {
    padding: 10px;
    margin: 10px;
    position: relative;
}
<code>

If we refresh our site we will see that nothing has changed. What we have done is allowed all li's to be affected by the left, right, bottom and top properties. We will add the property 'left' and give it a value of 15px

<code><css>
li {
    padding: 10px;
    margin: 10px;
    position: relative;
    left: 15px;
}
<code>

Refresh the page and you will now see that each of the list items has moved to right. This might be a bit confusing but giving a value of 15px to left tells the element to move 15px away from the left. If we instead gave it a 'right' of 0px the li's would go to the right hand side.

<br>
<br>

Moving onto 'fixed' positioning. Fixed positioning sticks our element to the page so even if we scroll down, the element would remain exactly still. You will have saw fixed positioning all over the internet. The most common use case is a navigation bar. You'll notice that if you scroll the navigation bar stays put, and that's what fixed positioning is.

<br>
<br>

Now lets change our position property from relative to fixed

<code><css>
li {
    padding: 10px;
    margin: 10px;
    position: fixed;
    left: 15px;
}
<code>

To test this out we need our page to have enough content to actually scroll down. Instead of changing our code we can just zoom into our page by holding Ctrl and scrolling with our mouse wheel. Now if we scroll down you will see that our list items stay exactly still. If you're wondering why the list items are all clumped together it's simply because we are setting each of the li's to fixed, if we just set the ol or ul (whichever one you're using) to fixed the list would be readable.

<br>
<br>

And that brings us onto the last value that the position property can take - absolute. Absolute positioning is the same as fixed positioning with one key difference. Absolute positioning is fixed to its parent. For example if we look at our li's they are inside of an ol, so the ol is the parent and whatever is inside of the ol is the children - in this case the li's.

<br>
<br>

If we were to move the ol (parent) around our page, the li's (children) would be stuck to it, and if we scrolled down the li's would remain still.

<br>
<br>

The use cases of these may seem a bit arbitrary right now, but as we build more complex sites the use of them becomes a lot more obvious.

<br>
<br>

Another way we can affect the layout of elements is using the 'float' property. The float property determines where an element should be placed inside of its container (parent). We can give the float a value of either left or right. Lets test this out by adding a float of right to the ol 

<code><css>
ol {
    float: right;
}
<code>

If we refresh our page we will see that the list is pushed over to the right hand side of the page, this is because here our container for the list is the page itself so the list simply goes to the right hand side of the page.

<br>
<br>

So with the display property we can specify how an element is displayed on our page and with float we can specify how can element is positioned inside of its container.

<br>
<br>

And thats it for part 4, thanks for reading.